// Generated by IcedCoffeeScript 1.3.3f
(function() {
  var AuthenticatedRestCall, Connection, Topic, crypto, iced, qs, request, url, xml, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  crypto = require('crypto');

  qs = require('querystring');

  request = require('request');

  xml = require('xml2js');

  url = require('url');

  exports.Connection = Connection = (function() {

    function Connection(_arg) {
      this.accessKeyId = _arg.accessKeyId, this.secretAccessKey = _arg.secretAccessKey, this.awsHost = _arg.awsHost;
      if (!this.awsHost) this.awsHost = 'queue.amazonaws.com';
    }

    Connection.prototype.createTopic = function(_arg) {
      var owner, topic;
      owner = _arg.owner, topic = _arg.topic;
      return new Topic({
        conn: this,
        owner: owner,
        topic: topic
      });
    };

    return Connection;

  })();

  Topic = (function() {

    function Topic(_arg) {
      this.conn = _arg.conn, this.owner = _arg.owner, this.topic = _arg.topic;
    }

    Topic.prototype.makeAuthenticatedRestCall = function(command) {
      return new AuthenticatedRestCall({
        topic: this,
        command: command
      });
    };

    Topic.prototype.receiveMessage = function(cb) {
      var arc, err, q, res, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      q = {
        Action: 'ReceiveMessage',
        AttributeName: "All",
        MaxNumberOfMessages: 5,
        VisbilityTimeout: 15
      };
      arc = this.makeAuthenticatedRestCall(q);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/main.iced",
          funcname: "Topic.receiveMessage"
        });
        arc.run(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return res = arguments[1];
            };
          })(),
          lineno: 44
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err, res);
      });
    };

    return Topic;

  })();

  AuthenticatedRestCall = (function() {

    function AuthenticatedRestCall(_arg) {
      this.topic = _arg.topic, this.command = _arg.command;
      this.version = "2011-10-01";
      this.search = "";
    }

    AuthenticatedRestCall.prototype.hmac = function(str) {
      var hash;
      console.log("secret access key: " + this.topic.conn.secretAccessKey);
      hash = crypto.createHmac('sha256', this.topic.conn.secretAccessKey);
      return hash.update(str).digest('base64');
    };

    AuthenticatedRestCall.prototype.makeTime = function(o) {
      var date, day, fmt, mon, time, tparts, x, year;
      fmt = function(d) {
        if (d < 10) {
          return "0" + d;
        } else {
          return d;
        }
      };
      mon = fmt(o.getUTCMonth() + 1);
      day = fmt(o.getUTCDate());
      year = o.getUTCFullYear();
      date = [year, mon, day].join("-");
      tparts = (function() {
        var _i, _len, _ref, _results;
        _ref = [o.getUTCHours(), o.getUTCMinutes(), o.getUTCSeconds()];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          _results.push(fmt(x));
        }
        return _results;
      })();
      time = tparts.join(":");
      return "" + date + "T" + time + "Z";
    };

    AuthenticatedRestCall.prototype.toList = function(d) {
      var k, out, v;
      return out = (function() {
        var _results;
        _results = [];
        for (k in d) {
          v = d[k];
          _results.push([qs.escape(k), qs.escape(v)]);
        }
        return _results;
      })();
    };

    AuthenticatedRestCall.prototype.addParams = function(list) {
      var pair, s;
      console.log("addPArams " + (JSON.stringify(list)));
      s = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          pair = list[_i];
          _results.push(pair.join("="));
        }
        return _results;
      })()).join("&");
      if (this.search.length) this.search += "&";
      return this.search += s;
    };

    AuthenticatedRestCall.prototype.makeParams = function() {
      var boiler_plate, list;
      boiler_plate = {
        SignatureMethod: "HmacSHA256",
        SignatureVersion: 2,
        Timestamp: this.now,
        Version: this.version,
        AWSAccessKeyId: this.topic.conn.accessKeyId
      };
      list = (this.toList(boiler_plate)).concat(this.toList(this.command));
      list.sort();
      return this.addParams(list);
    };

    AuthenticatedRestCall.prototype.signCall = function() {
      var input, sig;
      input = [this.method, this.host, this.pathname, this.search].join("\n");
      console.log("input: " + input);
      sig = this.hmac(input);
      return this.addParams(this.toList({
        Signature: sig
      }));
    };

    AuthenticatedRestCall.prototype.run = function(cb) {
      var body, data, err, parser, req, response, uri, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this.method = "GET";
      this.protocol = "https";
      this.host = this.topic.conn.awsHost;
      this.pathname = ['', this.topic.owner, this.topic.topic].join("/");
      this.now = this.makeTime(new Date());
      this.makeParams();
      this.signCall();
      uri = url.format({
        host: this.host,
        pathname: this.pathname,
        protocol: this.protocol,
        search: this.search
      });
      console.log("calling to " + uri);
      req = {
        method: this.method,
        uri: uri
      };
      console.log("Headers: " + (JSON.stringify(req)));
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/main.iced",
          funcname: "AuthenticatedRestCall.run"
        });
        request(req, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              response = arguments[1];
              return body = arguments[2];
            };
          })(),
          lineno: 137
        }));
        __iced_deferrals._fulfill();
      })(function() {
        data = null;
        (function(__iced_k) {
          if (!(typeof err !== "undefined" && err !== null) && (typeof body !== "undefined" && body !== null)) {
            parser = new xml.Parser;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/main.iced",
                funcname: "AuthenticatedRestCall.run"
              });
              parser.parseString(body, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return data = arguments[1];
                  };
                })(),
                lineno: 141
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(data.hasOwnProperty('Error') ? err = new Error(data.Error.Message) : void 0);
            });
          } else {
            return __iced_k();
          }
        })(function() {
          return cb(err, data);
        });
      });
    };

    return AuthenticatedRestCall;

  })();

}).call(this);
