// Generated by IcedCoffeeScript 1.3.3f
(function() {
  var AmazonSQS, crypto, iced, qs, request, url, xml, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  crypto = require('crypto');

  qs = require('querystring');

  request = require('request');

  xml = require('xml2js');

  url = require('url');

  exports.AmazonSQS = AmazonSQS = (function() {

    function AmazonSQS(accessKeyId, secretAccessKey, _arg) {
      this.accessKeyId = accessKeyId;
      this.secretAccessKey = secretAccessKey;
      this.awsHost = _arg.awsHost, this.owner = _arg.owner, this.topic = _arg.topic;
      if (!this.awsHost) this.awsHost = 'queue.amazonaws.com';
    }

    AmazonSQS.prototype.hmac = function(str) {
      var hash;
      hash = crypto.createHmac('sha256', this.secretAccessKey);
      return hash.update(str).digest('base64');
    };

    AmazonSQS.prototype.makeAuth = function(now) {
      var auth, auth_pairs, v;
      auth_pairs = [["AWSAcessKeyId", this.accessKeyId], ["Algorithm", "HmacSHA356"], ["Signature", this.hmac(now)]];
      auth = "AWS3-HTTPS " + ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = auth_pairs.length; _i < _len; _i++) {
          v = auth_pairs[_i];
          _results.push(v.join("="));
        }
        return _results;
      })()).join(",");
      return auth;
    };

    AmazonSQS.prototype.makeHeaders = function(_arg) {
      var auth, body, headers, now;
      now = _arg.now, body = _arg.body, auth = _arg.auth;
      headers = {
        'Date': now,
        'Host': this.awsHost,
        'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
        'Content-Length': body.length,
        'X-Amzn-Authorization': auth
      };
      return headers;
    };

    AmazonSQS.prototype.call = function(query, callback) {
      var auth, body, data, err, headers, now, parser, path, req, response, uri, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      path = [this.owner, this.topic].join("/");
      now = (new Date()).toUTCString();
      body = qs.stringify(opts.query);
      auth = this.makeAuth(now);
      headers = this.makeHeaders({
        now: now,
        body: body,
        auth: auth
      });
      uri = url.format({
        host: this.awsHost,
        path: path,
        protocol: "https"
      });
      req = {
        method: 'POST',
        uri: uri,
        headers: headers,
        body: body
      };
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/main.iced",
          funcname: "AmazonSQS.call"
        });
        request(req, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              response = arguments[1];
              return body = arguments[2];
            };
          })(),
          lineno: 60
        }));
        __iced_deferrals._fulfill();
      })(function() {
        data = null;
        (function(__iced_k) {
          if (!(typeof err !== "undefined" && err !== null) && (body != null)) {
            parser = new xml.Parser;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/main.iced",
                funcname: "AmazonSQS.call"
              });
              parser.parseString(body, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return data = arguments[1];
                  };
                })(),
                lineno: 64
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(data.hasOwnProperty('Error') ? err = new Error(data.Error.Message) : void 0);
            });
          } else {
            return __iced_k();
          }
        })(function() {
          return opts.callback(err, data);
        });
      });
    };

    AmazonSQS.prototype.receiveMessage = function(cb) {
      var data, err, q, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      q = {
        Action: 'ReceiveMessage',
        AttributeNAme: "All",
        MaxNumberOfMessages: 5,
        VisbilityTimeout: 15,
        EmailAddress: email,
        Version: "2011-10-01"
      };
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/main.iced",
          funcname: "AmazonSQS.receiveMessage"
        });
        _this.call(q, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return data = arguments[1];
            };
          })(),
          lineno: 86
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err, data);
      });
    };

    return AmazonSQS;

  })();

}).call(this);
